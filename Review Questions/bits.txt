//Bit manipulation

//counts the no of set bits or '1's in given num----------------------------------------
public int count_one(int n) {
    while(n) {
        n = n&(n-1);
        count++;
    }
    return count;
}

public int hammingWeight(int n) {
        int k=1;
        int count=0;
        
        while(n!=0){
            
            if((n & k)==1)
                count++;
            
           n=n>>>1;
            
        }
        
        return count;   
    }

//power of 4------------------------------------------------------------------
    public boolean isPowerOfFour(int num) {
        int count=0;
        if(num<=0)
            return false;
        
        for(int i=0;i<32;i++)
        {
            int mask=(1<<i);
            
            if(i%2==0)
            {   
                if((mask&num)!=0)   //remember do not use mask&num==1 becase it                                       will give the value of number not bit
                    count++;
               
                if(count>1)
                    return false;
            }
            else
            {
                if((mask&num)!=0)
                    return false;
            }
            
        }
        
        return true;
        
    }

  public boolean isPowerOfFour(int num) {
        return num > 0 && (num&(num-1)) == 0 && (num & 0x55555555) != 0;
        //0x55555555 is to get rid of those power of 2 but not power of 4(it is 1 at odd places 10101010101...)
        //so that the single 1 bit always appears at the odd position 
        //num &(num-1) so that the only single one whihc appear becomes so 
    }

//power of 2-----------------------
  public boolean isPowerOfTwo(int num){
    //method 1.
       if(num<=0)
       {
           return false;
       }
        int size=0;
        for(int i=0;i<32;i++)
        {   int mask=(1<<i);
            
            int val=mask&num;
           
                    if(val!=0)
                    {
                        size++;
                     if(size>1)
                     return false;
                    }
        }
        return true;
        
        
//         //method2 n&(n-1) will remove the only one so we check if n==0 then true
//         num=num&(num-1);
//         return num==0;
    }


//addition without sign
// Iterative
public int getSum(int a, int b) {
      int c; 
      while(b !=0 ) {
        c = (a&b);
        a = a ^ b;
        b = (c)<<1;
      }
      return a;
        
    }
}

//missing numbe----------------------------------------------------
/*
Index	0	1	2	3       explaination
Value	0	1	3	4
missing=4∧(0∧0)∧(1∧1)∧(2∧3)∧(3∧4)=
(4∧4)∧(0∧0)∧(1∧1)∧(3∧3)∧2=
0∧0∧0∧0∧2=2
*/
    public int missingNumber(int[] arr) {
 //     // Method 1.
//        int ans=arr.length;
        
//         for(int i=0;i<arr.length;i++)
//         {
//           ans=ans^(i^arr[i]);
//         }
        
//         return ans;

//        //Method 2
        int sum=0;
        for(int i:arr)
        {
            sum+=i;
        }
        
        //since sum of 1 to n numbers=n(n+1)/2 but have to do 0 to n so n(n-1)/2;
        int n=arr.length+1;
        return (n*(n-1))/2 -sum;
    }


//reverse bits---------------------------------    

        public int reverseBits(int n) {
  // Method1.leetcode discussion  
    //in this method we basically & with the last digit and shift it to left one in    each iteration and if we found more one then add is to the res and continues shifting
        int res=0;
        
        for(int i=0;i<32;i++)
        {
            res=res<<1;
            if((n&1)==1)
            {
                res=res+1;
            }
            
            n=n>>>1;
            
        }
        
        return res;
        
//         //Method2 Leetcode solutions
        //int his method when we fount 1st '1' we shift it to left by 31 and the we found another one we shift it to left by 'shift' and add to to the previous res
        
//         int res=0;
//         int shift=31;
//         while(n!=0 ){
//             res=res+ ((n&1)<<shift);
//             n=n>>>1;
//             shift--;
//         }
        
//         return res;
        
//     }


